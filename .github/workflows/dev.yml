name: development deployment

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-versions: [16.x]

    steps:
      - name: Checkout source code.
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: yarn

      - name: Setting .env
        run: |
          echo "REACT_APP_AUTH_GITHUB_URL=${{ secrets.AUTH_GITHUB_URL }}" >> .env
          echo "REACT_APP_AUTH_GOOGLE_URL=${{ secrets.AUTH_GOOGLE_URL }}" >> .env
          echo "REACT_APP_AUTH_KAKAO_URL=${{ secrets.AUTH_KAKAO_URL }}" >> .env
          echo "REACT_APP_API_URL=${{ secrets.API_URL }}" >> .env
          echo "REACT_APP_API_URL_SOCKET=${{ secrets.API_URL_SOCKET }}" >> .env
          cat .env
      - name: Build
        run: yarn build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: aws s3 sync build/ s3://${{ secrets.DEV_AWS_S3_BUCKET }} --delete

      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id ${{secrets.DEV_AWS_DISTRIBUTION_ID}} --paths "/*"


name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-18.04
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: '${{ secrets.AWS_REGION }}'
    
    steps:
      - name: Checkout source code.  
        uses: actions/checkout@master

      - name: Cache node modules      
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
            
      - name: Generate Environment Variables File for Production
        run: |
          echo "REACT_APP_AUTH_GITHUB_URL=$REACT_APP_AUTH_GITHUB_URL" >> .env
          echo "REACT_APP_AUTH_GOOGLE_URL=$REACT_APP_AUTH_GOOGLE_URL" >> .env
          echo "REACT_APP_AUTH_KAKAO_URL=$EACT_APP_AUTH_KAKAO_URL" >> .env
          echo "REACT_APP_API_URL=$REACT_APP_API_URL" >> .env
          echo "REACT_APP_API_URL_SOCKET=$REACT_APP_API_URL_SOCKET" >> .env
          cat .env
          
        env:
          REACT_APP_AUTH_GITHUB_URL: ${{ secrets.AUTH_GITHUB_URL }}
          REACT_APP_AUTH_GOOGLE_URL: ${{ secrets.AUTH_GOOGLE_URL }}
          REACT_APP_AUTH_KAKAO_URL: ${{ secrets.AUTH_KAKAO_URL }}
          REACT_APP_API_URL: ${{secrets.API_URL }}
          REACT_APP_API_URL_SOCKET: ${{ secrets.API_URL_SOCKET }}
      - name: Install Dependencies   
        run: npm install

      - name: Build                   
        run: CI=false npm run build

      - name: Deploy                  
        run: |
          aws s3 cp \
            --recursive \
            --region ${{ secrets.AWS_REGION }} \
            build s3://${{ secrets.DEV_AWS_S3_BUCKET }}
            
      - name: Invalidate cache CloudFront
        uses: chetan/invalidate-cloudfront-action@master
        env:
          DISTRIBUTION: ${{ secrets.DEV_AWS_DISTRIBUTION_ID }}
          PATHS: '/*'
        continue-on-error: true



        